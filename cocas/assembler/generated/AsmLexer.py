# Generated from assembler/grammar/AsmLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,311,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,
        1,30,1,30,1,30,1,31,1,31,5,31,211,8,31,10,31,12,31,214,9,31,1,32,
        1,32,5,32,218,8,32,10,32,12,32,221,9,32,1,32,1,32,5,32,225,8,32,
        10,32,12,32,228,9,32,1,32,1,32,1,33,4,33,233,8,33,11,33,12,33,234,
        1,34,1,34,1,34,1,34,4,34,241,8,34,11,34,12,34,242,1,35,1,35,1,35,
        1,35,4,35,249,8,35,11,35,12,35,250,1,36,1,36,4,36,255,8,36,11,36,
        12,36,256,1,36,1,36,5,36,261,8,36,10,36,12,36,264,9,36,1,36,1,36,
        1,37,1,37,4,37,270,8,37,11,37,12,37,271,1,37,1,37,5,37,276,8,37,
        10,37,12,37,279,9,37,1,37,1,37,1,38,3,38,284,8,38,1,38,1,38,1,39,
        1,39,5,39,290,8,39,10,39,12,39,293,9,39,1,39,1,39,1,40,1,40,1,40,
        1,40,1,41,1,41,1,41,1,41,1,41,4,41,306,8,41,11,41,12,41,307,1,42,
        1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,1,0,
        12,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,5,0,46,46,
        48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,65,70,97,
        102,2,0,34,34,92,92,2,0,39,39,92,92,1,0,10,10,2,0,9,9,32,32,5,0,
        43,43,47,57,61,61,65,90,97,122,1,0,0,65534,325,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,1,87,1,0,0,0,3,93,1,0,0,0,5,99,1,0,0,0,7,108,1,
        0,0,0,9,111,1,0,0,0,11,116,1,0,0,0,13,120,1,0,0,0,15,124,1,0,0,0,
        17,127,1,0,0,0,19,130,1,0,0,0,21,133,1,0,0,0,23,139,1,0,0,0,25,145,
        1,0,0,0,27,151,1,0,0,0,29,156,1,0,0,0,31,163,1,0,0,0,33,169,1,0,
        0,0,35,174,1,0,0,0,37,180,1,0,0,0,39,182,1,0,0,0,41,184,1,0,0,0,
        43,186,1,0,0,0,45,188,1,0,0,0,47,190,1,0,0,0,49,192,1,0,0,0,51,194,
        1,0,0,0,53,196,1,0,0,0,55,198,1,0,0,0,57,201,1,0,0,0,59,203,1,0,
        0,0,61,205,1,0,0,0,63,208,1,0,0,0,65,215,1,0,0,0,67,232,1,0,0,0,
        69,236,1,0,0,0,71,244,1,0,0,0,73,252,1,0,0,0,75,267,1,0,0,0,77,283,
        1,0,0,0,79,287,1,0,0,0,81,296,1,0,0,0,83,300,1,0,0,0,85,309,1,0,
        0,0,87,88,5,97,0,0,88,89,5,115,0,0,89,90,5,101,0,0,90,91,5,99,0,
        0,91,92,5,116,0,0,92,2,1,0,0,0,93,94,5,98,0,0,94,95,5,114,0,0,95,
        96,5,101,0,0,96,97,5,97,0,0,97,98,5,107,0,0,98,4,1,0,0,0,99,100,
        5,99,0,0,100,101,5,111,0,0,101,102,5,110,0,0,102,103,5,116,0,0,103,
        104,5,105,0,0,104,105,5,110,0,0,105,106,5,117,0,0,106,107,5,101,
        0,0,107,6,1,0,0,0,108,109,5,100,0,0,109,110,5,111,0,0,110,8,1,0,
        0,0,111,112,5,101,0,0,112,113,5,108,0,0,113,114,5,115,0,0,114,115,
        5,101,0,0,115,10,1,0,0,0,116,117,5,101,0,0,117,118,5,110,0,0,118,
        119,5,100,0,0,119,12,1,0,0,0,120,121,5,101,0,0,121,122,5,120,0,0,
        122,123,5,116,0,0,123,14,1,0,0,0,124,125,5,102,0,0,125,126,5,105,
        0,0,126,16,1,0,0,0,127,128,5,105,0,0,128,129,5,102,0,0,129,18,1,
        0,0,0,130,131,5,105,0,0,131,132,5,115,0,0,132,20,1,0,0,0,133,134,
        5,109,0,0,134,135,5,97,0,0,135,136,5,99,0,0,136,137,5,114,0,0,137,
        138,5,111,0,0,138,22,1,0,0,0,139,140,5,114,0,0,140,141,5,115,0,0,
        141,142,5,101,0,0,142,143,5,99,0,0,143,144,5,116,0,0,144,24,1,0,
        0,0,145,146,5,115,0,0,146,147,5,116,0,0,147,148,5,97,0,0,148,149,
        5,121,0,0,149,150,5,115,0,0,150,26,1,0,0,0,151,152,5,116,0,0,152,
        153,5,104,0,0,153,154,5,101,0,0,154,155,5,110,0,0,155,28,1,0,0,0,
        156,157,5,116,0,0,157,158,5,112,0,0,158,159,5,108,0,0,159,160,5,
        97,0,0,160,161,5,116,0,0,161,162,5,101,0,0,162,30,1,0,0,0,163,164,
        5,117,0,0,164,165,5,110,0,0,165,166,5,116,0,0,166,167,5,105,0,0,
        167,168,5,108,0,0,168,32,1,0,0,0,169,170,5,119,0,0,170,171,5,101,
        0,0,171,172,5,110,0,0,172,173,5,100,0,0,173,34,1,0,0,0,174,175,5,
        119,0,0,175,176,5,104,0,0,176,177,5,105,0,0,177,178,5,108,0,0,178,
        179,5,101,0,0,179,36,1,0,0,0,180,181,5,46,0,0,181,38,1,0,0,0,182,
        183,5,44,0,0,183,40,1,0,0,0,184,185,5,43,0,0,185,42,1,0,0,0,186,
        187,5,45,0,0,187,44,1,0,0,0,188,189,5,58,0,0,189,46,1,0,0,0,190,
        191,5,42,0,0,191,48,1,0,0,0,192,193,5,62,0,0,193,50,1,0,0,0,194,
        195,5,40,0,0,195,52,1,0,0,0,196,197,5,41,0,0,197,54,1,0,0,0,198,
        199,5,45,0,0,199,200,5,124,0,0,200,56,1,0,0,0,201,202,5,91,0,0,202,
        58,1,0,0,0,203,204,5,93,0,0,204,60,1,0,0,0,205,206,5,114,0,0,206,
        207,3,67,33,0,207,62,1,0,0,0,208,212,7,0,0,0,209,211,7,1,0,0,210,
        209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,
        64,1,0,0,0,214,212,1,0,0,0,215,219,7,0,0,0,216,218,7,1,0,0,217,216,
        1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,
        1,0,0,0,221,219,1,0,0,0,222,226,3,37,18,0,223,225,7,2,0,0,224,223,
        1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,
        1,0,0,0,228,226,1,0,0,0,229,230,7,1,0,0,230,66,1,0,0,0,231,233,7,
        3,0,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,1,
        0,0,0,235,68,1,0,0,0,236,237,5,48,0,0,237,238,5,98,0,0,238,240,1,
        0,0,0,239,241,7,4,0,0,240,239,1,0,0,0,241,242,1,0,0,0,242,240,1,
        0,0,0,242,243,1,0,0,0,243,70,1,0,0,0,244,245,5,48,0,0,245,246,5,
        120,0,0,246,248,1,0,0,0,247,249,7,5,0,0,248,247,1,0,0,0,249,250,
        1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,72,1,0,0,0,252,262,5,
        34,0,0,253,255,8,6,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,
        0,0,0,256,257,1,0,0,0,257,261,1,0,0,0,258,259,5,92,0,0,259,261,9,
        0,0,0,260,254,1,0,0,0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,
        0,0,0,262,263,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,266,5,
        34,0,0,266,74,1,0,0,0,267,277,5,39,0,0,268,270,8,7,0,0,269,268,1,
        0,0,0,270,271,1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,276,1,
        0,0,0,273,274,5,92,0,0,274,276,9,0,0,0,275,269,1,0,0,0,275,273,1,
        0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,280,1,
        0,0,0,279,277,1,0,0,0,280,281,5,39,0,0,281,76,1,0,0,0,282,284,5,
        13,0,0,283,282,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,5,
        10,0,0,286,78,1,0,0,0,287,291,5,35,0,0,288,290,8,8,0,0,289,288,1,
        0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,
        0,0,0,293,291,1,0,0,0,294,295,6,39,0,0,295,80,1,0,0,0,296,297,7,
        9,0,0,297,298,1,0,0,0,298,299,6,40,0,0,299,82,1,0,0,0,300,301,5,
        102,0,0,301,302,5,112,0,0,302,303,5,45,0,0,303,305,1,0,0,0,304,306,
        7,10,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,
        1,0,0,0,308,84,1,0,0,0,309,310,7,11,0,0,310,86,1,0,0,0,16,0,212,
        219,226,234,242,250,256,260,262,271,275,277,283,291,307,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    If = 9
    Is = 10
    Macro = 11
    Rsect = 12
    Stays = 13
    Then = 14
    Tplate = 15
    Until = 16
    Wend = 17
    While = 18
    DOT = 19
    COMMA = 20
    PLUS = 21
    MINUS = 22
    COLON = 23
    ASTERISK = 24
    ANGLE_BRACKET = 25
    OPEN_PAREN = 26
    CLOSE_PAREN = 27
    LINE_MARK_MARKER = 28
    OPEN_SQUARE_BRACKET = 29
    CLOSE_SQUARE_BRACKET = 30
    REGISTER = 31
    WORD = 32
    WORD_WITH_DOTS = 33
    DECIMAL_NUMBER = 34
    BINARY_NUMBER = 35
    HEX_NUMBER = 36
    STRING = 37
    CHAR = 38
    NEWLINE = 39
    COMMENT = 40
    WS = 41
    BASE64 = 42
    UNEXPECTED_TOKEN = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'if'", "'is'", "'macro'", "'rsect'", "'stays'", 
            "'then'", "'tplate'", "'until'", "'wend'", "'while'", "'.'", 
            "','", "'+'", "'-'", "':'", "'*'", "'>'", "'('", "')'", "'-|'", 
            "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", "Until", 
            "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", "COLON", "ASTERISK", 
            "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", 
            "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "REGISTER", "WORD", 
            "WORD_WITH_DOTS", "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", 
            "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", 
                  "Until", "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", 
                  "COLON", "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LINE_MARK_MARKER", "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                  "REGISTER", "WORD", "WORD_WITH_DOTS", "DECIMAL_NUMBER", 
                  "BINARY_NUMBER", "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", 
                  "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


