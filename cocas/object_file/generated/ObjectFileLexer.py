# Generated from object_file/grammar/ObjectFileLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,213,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
        10,1,10,1,11,4,11,119,8,11,11,11,12,11,120,1,12,1,12,5,12,125,8,
        12,10,12,12,12,128,9,12,1,12,1,12,5,12,132,8,12,10,12,12,12,135,
        9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,3,18,153,8,18,1,18,4,18,156,8,18,11,18,12,18,
        157,1,19,4,19,161,8,19,11,19,12,19,162,1,19,1,19,1,20,3,20,168,8,
        20,1,20,4,20,171,8,20,11,20,12,20,172,1,20,1,20,1,21,4,21,178,8,
        21,11,21,12,21,179,1,22,4,22,183,8,22,11,22,12,22,184,1,23,4,23,
        188,8,23,11,23,12,23,189,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,
        4,25,200,8,25,11,25,12,25,201,1,25,1,25,1,25,1,26,4,26,208,8,26,
        11,26,12,26,209,1,26,1,26,0,0,27,5,1,7,2,9,3,11,4,13,5,15,6,17,7,
        19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,
        41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,5,0,1,2,3,
        4,6,4,0,48,57,65,90,95,95,97,122,3,0,65,90,95,95,97,122,5,0,46,46,
        48,57,65,90,95,95,97,122,2,0,9,9,32,32,6,0,9,9,32,32,48,57,65,90,
        95,95,97,122,2,0,10,10,13,13,221,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,
        0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,1,47,1,0,0,0,2,49,1,0,
        0,0,2,51,1,0,0,0,2,53,1,0,0,0,3,55,1,0,0,0,4,57,1,0,0,0,5,59,1,0,
        0,0,7,64,1,0,0,0,9,71,1,0,0,0,11,77,1,0,0,0,13,81,1,0,0,0,15,86,
        1,0,0,0,17,91,1,0,0,0,19,96,1,0,0,0,21,103,1,0,0,0,23,107,1,0,0,
        0,25,112,1,0,0,0,27,118,1,0,0,0,29,122,1,0,0,0,31,138,1,0,0,0,33,
        143,1,0,0,0,35,145,1,0,0,0,37,147,1,0,0,0,39,149,1,0,0,0,41,155,
        1,0,0,0,43,160,1,0,0,0,45,170,1,0,0,0,47,177,1,0,0,0,49,182,1,0,
        0,0,51,187,1,0,0,0,53,193,1,0,0,0,55,199,1,0,0,0,57,207,1,0,0,0,
        59,60,5,84,0,0,60,61,5,65,0,0,61,62,5,82,0,0,62,63,5,71,0,0,63,6,
        1,0,0,0,64,65,5,70,0,0,65,66,5,73,0,0,66,67,5,76,0,0,67,68,5,69,
        0,0,68,69,1,0,0,0,69,70,6,1,0,0,70,8,1,0,0,0,71,72,5,65,0,0,72,73,
        5,66,0,0,73,74,5,83,0,0,74,75,1,0,0,0,75,76,6,2,1,0,76,10,1,0,0,
        0,77,78,5,76,0,0,78,79,5,79,0,0,79,80,5,67,0,0,80,12,1,0,0,0,81,
        82,5,78,0,0,82,83,5,84,0,0,83,84,5,82,0,0,84,85,5,89,0,0,85,14,1,
        0,0,0,86,87,5,78,0,0,87,88,5,65,0,0,88,89,5,77,0,0,89,90,5,69,0,
        0,90,16,1,0,0,0,91,92,5,65,0,0,92,93,5,76,0,0,93,94,5,73,0,0,94,
        95,5,71,0,0,95,18,1,0,0,0,96,97,5,68,0,0,97,98,5,65,0,0,98,99,5,
        84,0,0,99,100,5,65,0,0,100,101,1,0,0,0,101,102,6,7,2,0,102,20,1,
        0,0,0,103,104,5,82,0,0,104,105,5,69,0,0,105,106,5,76,0,0,106,22,
        1,0,0,0,107,108,5,88,0,0,108,109,5,84,0,0,109,110,5,82,0,0,110,111,
        5,78,0,0,111,24,1,0,0,0,112,113,5,65,0,0,113,114,5,84,0,0,114,115,
        5,84,0,0,115,116,5,82,0,0,116,26,1,0,0,0,117,119,7,0,0,0,118,117,
        1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,28,1,
        0,0,0,122,126,7,1,0,0,123,125,7,0,0,0,124,123,1,0,0,0,125,128,1,
        0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,
        0,0,0,129,133,3,39,17,0,130,132,7,2,0,0,131,130,1,0,0,0,132,135,
        1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,133,
        1,0,0,0,136,137,7,0,0,0,137,30,1,0,0,0,138,139,5,36,0,0,139,140,
        5,97,0,0,140,141,5,98,0,0,141,142,5,115,0,0,142,32,1,0,0,0,143,144,
        5,58,0,0,144,34,1,0,0,0,145,146,5,45,0,0,146,36,1,0,0,0,147,148,
        5,43,0,0,148,38,1,0,0,0,149,150,5,46,0,0,150,40,1,0,0,0,151,153,
        5,13,0,0,152,151,1,0,0,0,152,153,1,0,0,0,153,154,1,0,0,0,154,156,
        5,10,0,0,155,152,1,0,0,0,156,157,1,0,0,0,157,155,1,0,0,0,157,158,
        1,0,0,0,158,42,1,0,0,0,159,161,7,3,0,0,160,159,1,0,0,0,161,162,1,
        0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,164,1,0,0,0,164,165,6,
        19,3,0,165,44,1,0,0,0,166,168,5,13,0,0,167,166,1,0,0,0,167,168,1,
        0,0,0,168,169,1,0,0,0,169,171,5,10,0,0,170,167,1,0,0,0,171,172,1,
        0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,175,6,
        20,4,0,175,46,1,0,0,0,176,178,7,4,0,0,177,176,1,0,0,0,178,179,1,
        0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,48,1,0,0,0,181,183,7,0,
        0,0,182,181,1,0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,
        0,0,185,50,1,0,0,0,186,188,7,3,0,0,187,186,1,0,0,0,188,189,1,0,0,
        0,189,187,1,0,0,0,189,190,1,0,0,0,190,191,1,0,0,0,191,192,6,23,3,
        0,192,52,1,0,0,0,193,194,5,58,0,0,194,195,1,0,0,0,195,196,6,24,4,
        0,196,197,6,24,2,0,197,54,1,0,0,0,198,200,5,32,0,0,199,198,1,0,0,
        0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,
        0,203,204,6,25,4,0,204,205,6,25,5,0,205,56,1,0,0,0,206,208,8,5,0,
        0,207,206,1,0,0,0,208,209,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,
        0,210,211,1,0,0,0,211,212,6,26,4,0,212,58,1,0,0,0,18,0,1,2,3,4,120,
        126,133,152,157,162,167,172,179,184,189,201,209,6,5,3,0,5,2,0,5,
        1,0,6,0,0,4,0,0,5,4,0
    ]

class ObjectFileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IN_BYTES = 1
    IN_ABS = 2
    IN_FILE = 3
    IN_FILEPATH = 4

    TARG = 1
    FILE = 2
    ABS = 3
    LOC = 4
    NTRY = 5
    NAME = 6
    ALIG = 7
    DATA = 8
    REL = 9
    XTRN = 10
    ATTR = 11
    WORD = 12
    WORD_WITH_DOTS = 13
    ABS_SECTION = 14
    COLON = 15
    MINUS = 16
    PLUS = 17
    DOT = 18
    NEWLINE = 19
    WS = 20
    NEWLINE_BYTES = 21
    BYTES = 22
    WORD_ABS = 23
    WS_ABS = 24
    COLON_ABS = 25
    SPACES_FILE = 26
    FILEPATH = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "IN_BYTES", "IN_ABS", "IN_FILE", "IN_FILEPATH" ]

    literalNames = [ "<INVALID>",
            "'TARG'", "'FILE'", "'ABS'", "'LOC'", "'NTRY'", "'NAME'", "'ALIG'", 
            "'DATA'", "'REL'", "'XTRN'", "'ATTR'", "'$abs'", "'-'", "'+'", 
            "'.'" ]

    symbolicNames = [ "<INVALID>",
            "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", "DATA", 
            "REL", "XTRN", "ATTR", "WORD", "WORD_WITH_DOTS", "ABS_SECTION", 
            "COLON", "MINUS", "PLUS", "DOT", "NEWLINE", "WS", "NEWLINE_BYTES", 
            "BYTES", "WORD_ABS", "WS_ABS", "COLON_ABS", "SPACES_FILE", "FILEPATH" ]

    ruleNames = [ "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", 
                  "DATA", "REL", "XTRN", "ATTR", "WORD", "WORD_WITH_DOTS", 
                  "ABS_SECTION", "COLON", "MINUS", "PLUS", "DOT", "NEWLINE", 
                  "WS", "NEWLINE_BYTES", "BYTES", "WORD_ABS", "WS_ABS", 
                  "COLON_ABS", "SPACES_FILE", "FILEPATH" ]

    grammarFileName = "ObjectFileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


