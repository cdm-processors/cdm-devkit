# Generated from object_file/grammar/ObjectFileLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,218,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
        2,24,7,24,2,25,7,25,2,26,7,26,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,4,
        10,117,8,10,11,10,12,10,118,1,11,1,11,5,11,123,8,11,10,11,12,11,
        126,9,11,1,11,1,11,5,11,130,8,11,10,11,12,11,133,9,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,
        1,17,3,17,151,8,17,1,17,4,17,154,8,17,11,17,12,17,155,1,18,4,18,
        159,8,18,11,18,12,18,160,1,18,1,18,1,19,3,19,166,8,19,1,19,4,19,
        169,8,19,11,19,12,19,170,1,19,1,19,1,20,4,20,176,8,20,11,20,12,20,
        177,1,21,4,21,181,8,21,11,21,12,21,182,1,22,4,22,186,8,22,11,22,
        12,22,187,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,4,24,198,8,24,
        11,24,12,24,199,1,24,1,24,1,24,1,25,4,25,206,8,25,11,25,12,25,207,
        1,25,1,25,1,26,4,26,213,8,26,11,26,12,26,214,1,26,1,26,0,0,27,6,
        1,8,2,10,3,12,4,14,5,16,6,18,7,20,8,22,9,24,10,26,11,28,12,30,13,
        32,14,34,15,36,16,38,17,40,18,42,19,44,20,46,21,48,22,50,23,52,24,
        54,25,56,26,58,27,6,0,1,2,3,4,5,7,4,0,48,57,65,90,95,95,97,122,3,
        0,65,90,95,95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,2,0,9,9,
        32,32,6,0,9,9,32,32,48,57,65,90,95,95,97,122,2,0,10,10,13,13,4,0,
        32,32,48,58,65,70,97,102,226,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,
        0,0,12,1,0,0,0,0,14,1,0,0,0,0,16,1,0,0,0,0,18,1,0,0,0,0,20,1,0,0,
        0,0,22,1,0,0,0,0,24,1,0,0,0,0,26,1,0,0,0,0,28,1,0,0,0,0,30,1,0,0,
        0,0,32,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,1,0,0,
        0,0,42,1,0,0,0,1,44,1,0,0,0,1,46,1,0,0,0,2,48,1,0,0,0,2,50,1,0,0,
        0,2,52,1,0,0,0,3,54,1,0,0,0,4,56,1,0,0,0,5,58,1,0,0,0,6,60,1,0,0,
        0,8,65,1,0,0,0,10,72,1,0,0,0,12,78,1,0,0,0,14,84,1,0,0,0,16,89,1,
        0,0,0,18,94,1,0,0,0,20,99,1,0,0,0,22,106,1,0,0,0,24,110,1,0,0,0,
        26,116,1,0,0,0,28,120,1,0,0,0,30,136,1,0,0,0,32,141,1,0,0,0,34,143,
        1,0,0,0,36,145,1,0,0,0,38,147,1,0,0,0,40,153,1,0,0,0,42,158,1,0,
        0,0,44,168,1,0,0,0,46,175,1,0,0,0,48,180,1,0,0,0,50,185,1,0,0,0,
        52,191,1,0,0,0,54,197,1,0,0,0,56,205,1,0,0,0,58,212,1,0,0,0,60,61,
        5,84,0,0,61,62,5,65,0,0,62,63,5,82,0,0,63,64,5,71,0,0,64,7,1,0,0,
        0,65,66,5,70,0,0,66,67,5,73,0,0,67,68,5,76,0,0,68,69,5,69,0,0,69,
        70,1,0,0,0,70,71,6,1,0,0,71,9,1,0,0,0,72,73,5,65,0,0,73,74,5,66,
        0,0,74,75,5,83,0,0,75,76,1,0,0,0,76,77,6,2,1,0,77,11,1,0,0,0,78,
        79,5,76,0,0,79,80,5,79,0,0,80,81,5,67,0,0,81,82,1,0,0,0,82,83,6,
        3,2,0,83,13,1,0,0,0,84,85,5,78,0,0,85,86,5,84,0,0,86,87,5,82,0,0,
        87,88,5,89,0,0,88,15,1,0,0,0,89,90,5,78,0,0,90,91,5,65,0,0,91,92,
        5,77,0,0,92,93,5,69,0,0,93,17,1,0,0,0,94,95,5,65,0,0,95,96,5,76,
        0,0,96,97,5,73,0,0,97,98,5,71,0,0,98,19,1,0,0,0,99,100,5,68,0,0,
        100,101,5,65,0,0,101,102,5,84,0,0,102,103,5,65,0,0,103,104,1,0,0,
        0,104,105,6,7,3,0,105,21,1,0,0,0,106,107,5,82,0,0,107,108,5,69,0,
        0,108,109,5,76,0,0,109,23,1,0,0,0,110,111,5,88,0,0,111,112,5,84,
        0,0,112,113,5,82,0,0,113,114,5,78,0,0,114,25,1,0,0,0,115,117,7,0,
        0,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,
        0,0,119,27,1,0,0,0,120,124,7,1,0,0,121,123,7,0,0,0,122,121,1,0,0,
        0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,127,1,0,0,
        0,126,124,1,0,0,0,127,131,3,38,16,0,128,130,7,2,0,0,129,128,1,0,
        0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,
        0,0,133,131,1,0,0,0,134,135,7,0,0,0,135,29,1,0,0,0,136,137,5,36,
        0,0,137,138,5,97,0,0,138,139,5,98,0,0,139,140,5,115,0,0,140,31,1,
        0,0,0,141,142,5,58,0,0,142,33,1,0,0,0,143,144,5,45,0,0,144,35,1,
        0,0,0,145,146,5,43,0,0,146,37,1,0,0,0,147,148,5,46,0,0,148,39,1,
        0,0,0,149,151,5,13,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,152,1,
        0,0,0,152,154,5,10,0,0,153,150,1,0,0,0,154,155,1,0,0,0,155,153,1,
        0,0,0,155,156,1,0,0,0,156,41,1,0,0,0,157,159,7,3,0,0,158,157,1,0,
        0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,162,1,0,
        0,0,162,163,6,18,4,0,163,43,1,0,0,0,164,166,5,13,0,0,165,164,1,0,
        0,0,165,166,1,0,0,0,166,167,1,0,0,0,167,169,5,10,0,0,168,165,1,0,
        0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,172,1,0,
        0,0,172,173,6,19,5,0,173,45,1,0,0,0,174,176,7,4,0,0,175,174,1,0,
        0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,47,1,0,0,
        0,179,181,7,0,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,
        0,182,183,1,0,0,0,183,49,1,0,0,0,184,186,7,3,0,0,185,184,1,0,0,0,
        186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,
        189,190,6,22,4,0,190,51,1,0,0,0,191,192,5,58,0,0,192,193,1,0,0,0,
        193,194,6,23,5,0,194,195,6,23,3,0,195,53,1,0,0,0,196,198,5,32,0,
        0,197,196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,
        0,200,201,1,0,0,0,201,202,6,24,5,0,202,203,6,24,6,0,203,55,1,0,0,
        0,204,206,8,5,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,
        0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,6,25,5,0,210,57,1,0,0,
        0,211,213,7,6,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,
        0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,6,26,5,0,217,59,1,0,0,
        0,20,0,1,2,3,4,5,118,124,131,150,155,160,165,170,177,182,187,199,
        207,214,7,5,3,0,5,2,0,5,5,0,5,1,0,6,0,0,4,0,0,5,4,0
    ]

class ObjectFileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IN_BYTES = 1
    IN_ABS = 2
    IN_FILE = 3
    IN_FILEPATH = 4
    IN_LOC = 5

    TARG = 1
    FILE = 2
    ABS = 3
    LOC = 4
    NTRY = 5
    NAME = 6
    ALIG = 7
    DATA = 8
    REL = 9
    XTRN = 10
    WORD = 11
    WORD_WITH_DOTS = 12
    ABS_SECTION = 13
    COLON = 14
    MINUS = 15
    PLUS = 16
    DOT = 17
    NEWLINE = 18
    WS = 19
    NEWLINE_BYTES = 20
    BYTES = 21
    WORD_ABS = 22
    WS_ABS = 23
    COLON_ABS = 24
    SPACES_FILE = 25
    FILEPATH = 26
    LOCS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "IN_BYTES", "IN_ABS", "IN_FILE", "IN_FILEPATH", 
                  "IN_LOC" ]

    literalNames = [ "<INVALID>",
            "'TARG'", "'FILE'", "'ABS'", "'LOC'", "'NTRY'", "'NAME'", "'ALIG'", 
            "'DATA'", "'REL'", "'XTRN'", "'$abs'", "'-'", "'+'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", "DATA", 
            "REL", "XTRN", "WORD", "WORD_WITH_DOTS", "ABS_SECTION", "COLON", 
            "MINUS", "PLUS", "DOT", "NEWLINE", "WS", "NEWLINE_BYTES", "BYTES", 
            "WORD_ABS", "WS_ABS", "COLON_ABS", "SPACES_FILE", "FILEPATH", 
            "LOCS" ]

    ruleNames = [ "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", 
                  "DATA", "REL", "XTRN", "WORD", "WORD_WITH_DOTS", "ABS_SECTION", 
                  "COLON", "MINUS", "PLUS", "DOT", "NEWLINE", "WS", "NEWLINE_BYTES", 
                  "BYTES", "WORD_ABS", "WS_ABS", "COLON_ABS", "SPACES_FILE", 
                  "FILEPATH", "LOCS" ]

    grammarFileName = "ObjectFileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


